<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.helf.mapper.UserMapper">
	
	<!-- 아이디로 유저 정보 조회  -->
	<select id="getUserById" parameterType="string" resultType="User">
		select
			u.user_id					as id,
			u.user_email				as email,
			u.user_name					as name,
			u.user_tel					as tel,
			u.user_encrypted_password 	as encryptedPassword,
			u.user_gender				as gender,
			u.user_status				as status,
			u.user_mobile_carrier		as mobileCarrier,
			u.user_create_date			as createDate, 
			u.user_update_date			as updateDate,
			u.user_point				as point,
			u.rank_no					as "rank.no",
			r.rank_name					as "rank.name",
			u.user_type					as type,
			u.user_authentication_no	as authenticationNo,
			u.user_social				as social
		from
			helf_users u, helf_ranks r
		where 
			u.user_id = #{value}
		and u.rank_no = r.rank_no(+)
	</select>
	
	<!-- 유저정보 업데이트(수정)  -->
	<update id="updateUser" parameterType="User">
		update 
			helf_users
		set 
			user_email  = 	#{email},			
			user_name   = 	#{name},			
			user_tel    = 	#{tel},	
			user_encrypted_password = #{encryptedPassword},
			user_gender	=	#{gender},		
			user_status	=	#{status},	
			user_update_date = sysdate,
			rank_no = #{rank.no},
			user_type	= #{type},
			user_point 	= #{point},
			user_mobile_carrier = #{mobileCarrier},
			user_authentication_no = #{authenticationNo}
		where 
			user_id = #{id}
	</update>

	<!-- 트레이너 테이블 업데이트  -->
	<update id="updateTrainerById" parameterType="Trainer">
		update
			helf_trainers
		set
			trainer_file = #{trainerFile},
			trainer_resignation_date = #{resignationDate},
			trainer_title = #{title},
			trainer_hired_date = #{hiredDate}
		where 
			trainer_no = #{trainerNo}
	</update>
	
	<!-- 유저 등록 -->
	<insert id="insertUser" parameterType="User">
		insert into helf_users
		(user_id, user_email, user_name, user_tel, user_encrypted_password,
		 user_gender, user_type, rank_no, user_point, user_mobile_carrier,
		 user_social)
		values
		(#{id}, #{email}, #{name}, #{tel}, #{encryptedPassword}, 
		 #{gender}, #{type}, 1, #{point}, #{mobileCarrier},
		 #{social})
	</insert>
	
	<!-- 트레이너 회원가입 1단계 (유저객체에 등록) -->
	<insert id="insertTrainer" parameterType="User">
		insert into helf_users
		(user_id, user_email, user_name, user_tel, user_encrypted_password,
		 user_gender, user_status, user_type, rank_no, user_point, user_mobile_carrier)
		values
		(#{id}, #{email}, #{name}, #{tel}, #{encryptedPassword}, 
		 #{gender}, #{status}, #{type}, null, #{point}, #{mobileCarrier})
	</insert>
	
	<!-- 트레이너 회원가입 2단계 (트레이너객체에 등록) -->
	<insert id="insertTrainer2" parameterType="Trainer">
		<selectKey keyProperty="trainerNo" resultType="int" order="BEFORE">
			select helf_files_seq.nextval from dual
		</selectKey>
		insert into helf_trainers
		(trainer_no, trainer_file, user_id)
		values
		(#{trainerNo}, #{trainerFile}, #{user.id})
	</insert>

	<!-- 트레이너 회원가입 2단계 (트레이너 경력객체에 등록) -->
	<insert id="insertTrainerCareer" parameterType="TrainerCareer">
		insert into helf_trainer_career
		(career_no, career_name, career_start_date, career_end_date, trainer_no)
		values
		(helf_trainer_career_seq.nextval, #{name}, #{startDate}, #{endDate}, #{trainer.trainerNo})
	</insert>
	
	<select id="getUsersByDigits" parameterType="string" resultType="kr.co.helf.vo.User">
		select
			user_id					as id,
			user_email				as email,
			user_name				as name,
			user_tel				as tel,
			user_encrypted_password as encryptedPassword,
			user_gender				as gender,
			user_status				as status,
			user_mobile_carrier		as mobileCarrier,
			user_create_date		as createDate,
			user_update_date		as updateDate,
			user_point				as point,
			rank_no					as "rank.no",
			user_type				as type
		from
			helf_users
		where substr(user_tel, 10, 4) = #{value}
	</select>
	
	<!-- 아이디찾기 -->
	<select id="getIdByTel" resultType="string">
		select
			user_id
		from
			helf_users
		where 
			user_name = #{name}
			and user_tel = #{tel}
	</select>
	
	
	<!-- 아이디중복검사  -->
	<select id="idCheck" resultType="int" parameterType="string">
		select count(*) from helf_users where user_id = #{value}
	</select>
	
	
	<!-- 비밀번호 찾기 - 인증번호 확인하기(ajax)  -->
	<select id="getUserAuthById" resultType="string" >
		select
			user_authentication_no
		from
			helf_users
		where 
			user_id = #{id}
	</select>
	

	<select id="getMyMembership" resultType="kr.co.helf.vo.MyMembership" parameterType="string">
		select
			A.my_membership_no				as no,
			A.my_membership_startdate		as startDate,
			A.my_membership_enddate			as endDate,
			A.my_membership_remainder_cnt	as remainderCnt,
			A.my_membership_state			as state,
			A.user_id						as "user.id",
			A.membership_no					as "membership.no",
			B.membership_name				as "membership_name",
			C.category_no					as "membership.category.no",
			D.user_type						as "user.type",
			D.user_name						as "user.name"
			
		from
			helf_my_membership A
		Join
			helf_users D on A.user_id = D.user_id
		Join
			helf_membership B on A.membership_no = B.membership_no
		Join
			helf_membership_category C on B.category_no = C.category_no	
		where A.user_id = #{value}
        and A.my_membership_state = '사용중'
        and C.category_no IN (1, 2)
	</select>
	
	<insert id="insertAttendance" parameterType="map">
		insert into helf_customer_attendance
    				(customer_attendance_no, user_id, my_membership_no)
		values 
    				(helf_customer_attendance_seq.nextval, #{userId}, #{myMembershipNo})
	</insert>
	
	<!-- 직원 출퇴근 내역 총 행의 갯수  -->
	<select id="getTrainerTotalRows" parameterType="map" resultType="int">
	select count(*)
	from helf_trainer_attendance
	where
		user_id = #{userId}
		<if test="state != null">
			and trainer_attendance_state = #{state}
		</if>
	</select>
	
	<!-- 직원 출퇴근 내역  - 채경 -->
	<select id="getTrainerAttendances" parameterType="map" resultType="kr.co.helf.vo.TrainerAttendance">
	select *
	from (
		select 
			trainer_attendance_no				as no,
			trainer_attendance_date				as "date",
			user_id								as "user.id",
			trainer_attendance_cause			as cause,
			trainer_attendance_state			as state,
			row_number() over (order by trainer_attendance_no desc) row_number
		from helf_trainer_attendance
		where
			user_id = #{userId}
			<if test="state != null">
				and trainer_attendance_state = #{state}
			</if>
		order by trainer_attendance_no desc
	) 
	where row_number between #{begin} and #{end}
	</select>
	
	<!-- 직원 출퇴근 등록 - 채경 -->
	<insert id="insertTrainerAttendances" parameterType="map">
		insert into helf_trainer_attendance(trainer_attendance_no, user_id, trainer_attendance_state, trainer_attendance_cause)
		values(helf_trainer_attendance_seq.nextval, #{userId}, #{state}, #{cause})	
	</insert>
	
	<!-- 고객 전체 행 개수 -->
	<select id="getCustomerTotalRows" resultType="int" parameterType="map">
		WITH LatestOrder AS (
		    SELECT
		       o.user_id,
		        m.membership_name,
		        o.orders_payment_date,
		        mm.my_membership_remainder_cnt,
		        mm.my_membership_enddate,
		        mm.my_membership_state,
		        ROW_NUMBER() OVER (PARTITION BY o.user_id ORDER BY o.orders_payment_date DESC) AS latest_rn
		    FROM HELF_ORDERS o
		    LEFT JOIN helf_my_membership mm ON o.my_membership_no = mm.my_membership_no
		    LEFT JOIN helf_membership m ON mm.membership_no = m.membership_no
		),
		
			FirstOrder AS (
		    	SELECT
			        o.user_id,
			        o.orders_payment_date,
			        ROW_NUMBER() OVER (PARTITION BY o.user_id ORDER BY o.orders_payment_date ASC) AS first_rn
			    FROM HELF_ORDERS o
			)
		
		, AllData AS (
		    SELECT 
		        u.user_id       as userId,
		        u.user_name     as userName,
		        u.user_gender   as userGender,
		        u.user_tel      as userTel,
		        u.user_status   as userStatus,
		        f.orders_payment_date AS firstOrderDate,
		        l.orders_payment_date AS latestOrderDate,
		        l.membership_name AS MembershipName,
		        l.my_membership_remainder_cnt AS myMembershipRemainderCnt,
		        l.my_membership_enddate AS myMembershipEndDate,
		        l.my_membership_state   AS myMembershipState
		    FROM HELF_USERS u
		    LEFT JOIN FirstOrder f ON u.user_id = f.user_id AND f.first_rn = 1
		    LEFT JOIN LatestOrder l ON u.user_id = l.user_id AND l.latest_rn = 1
		    WHERE u.user_type = 'ROLE_USER'
		        <if test="opt == 'name'">
		            AND u.user_name = INITCAP(#{keyword})
		        </if>
		        <if test="opt == 'tel'">
		            AND u.user_tel = #{keyword}
		        </if>
		        <if test="userStatus == '유효회원'">
		            AND u.user_status = 'Y'
		        </if>
		        <if test="userStatus == '탈퇴회원'">
		            AND u.user_status = 'N' 
		        </if>
		        <if test="membershipState == '사용대기'">
		            AND l.my_membership_state = '사용대기'
		        </if>
		        <if test="membershipState == '사용가능'">
		            AND l.my_membership_state = '사용가능'
		        </if>
		        <if test="membershipState == '사용중'">
		            AND l.my_membership_state = '사용중'
		        </if>
		        <if test="membershipState == '사용불가'">
		            AND l.my_membership_state = '사용불가'
		        </if>
		        <if test="remainderCnt != null">
		            AND l.my_membership_remainder_cnt &lt;= #{remainderCnt}
		        </if>
		        <if test="remainingDays1 != null and remainingDays2 != null">
		            AND l.my_membership_enddate BETWEEN #{remainingDays1} AND #{remainingDays2}
		        </if>
		)
		SELECT count(*) 
		FROM AllData
	</select>
	
	<!-- 고객 정보 조회 내역 - 채경 -->
	<select id="getCustomers" parameterType="map" resultType="kr.co.helf.dto.CustomerListDto" >
		WITH LatestOrder AS (
		    SELECT
		       o.user_id,
		        m.membership_name,
		        o.orders_payment_date,
		        mm.my_membership_remainder_cnt,
		        mm.my_membership_enddate,
		        mm.my_membership_state,
		        ROW_NUMBER() OVER (PARTITION BY o.user_id ORDER BY o.orders_payment_date DESC) AS latest_rn
		    FROM HELF_ORDERS o
		    LEFT JOIN helf_my_membership mm ON o.my_membership_no = mm.my_membership_no
		    LEFT JOIN helf_membership m ON mm.membership_no = m.membership_no
		),
		
			FirstOrder AS (
		    	SELECT
			        o.user_id,
			        o.orders_payment_date,
			        ROW_NUMBER() OVER (PARTITION BY o.user_id ORDER BY o.orders_payment_date ASC) AS first_rn
			    FROM HELF_ORDERS o
			)
		
		, AllData AS (
		    SELECT 
		        u.user_id       as userId,
		        u.user_name     as userName,
		        u.user_gender   as userGender,
		        u.user_tel      as userTel,
		        u.user_status   as userStatus,
		        f.orders_payment_date AS firstOrderDate,
		        l.orders_payment_date AS latestOrderDate,
		        l.membership_name AS MembershipName,
		        l.my_membership_remainder_cnt AS myMembershipRemainderCnt,
		        l.my_membership_enddate AS myMembershipEndDate,
		        l.my_membership_state   AS myMembershipState,
		        ROW_NUMBER() OVER (ORDER BY u.user_name) AS row_number
		    FROM HELF_USERS u
		    LEFT JOIN FirstOrder f ON u.user_id = f.user_id AND f.first_rn = 1
		    LEFT JOIN LatestOrder l ON u.user_id = l.user_id AND l.latest_rn = 1
		    WHERE u.user_type = 'ROLE_USER'
		        <if test="opt == 'name'">
		            AND u.user_name = INITCAP(#{keyword})
		        </if>
		        <if test="opt == 'tel'">
		            AND u.user_tel = #{keyword}
		        </if>
		        <if test="userStatus == '유효회원'">
		            AND u.user_status = 'Y'
		        </if>
		        <if test="userStatus == '탈퇴회원'">
		            AND u.user_status = 'N' 
		        </if>
		        <if test="membershipState == '사용대기'">
		            AND l.my_membership_state = '사용대기'
		        </if>
		        <if test="membershipState == '사용가능'">
		            AND l.my_membership_state = '사용가능'
		        </if>
		        <if test="membershipState == '사용중'">
		            AND l.my_membership_state = '사용중'
		        </if>
		        <if test="membershipState == '사용불가'">
		            AND l.my_membership_state = '사용불가'
		        </if>
		        <if test="remainderCnt != null">
		           AND l.my_membership_remainder_cnt &lt;= #{remainderCnt}
		        </if>
		        <if test="remainingDays1 != null and remainingDays2 != null">
		            AND l.my_membership_enddate BETWEEN #{remainingDays1} AND #{remainingDays2}
		        </if>
		)
		SELECT * 
		FROM AllData
		WHERE row_number BETWEEN #{begin} AND #{end}
		ORDER BY row_number
	</select>
	
	<select id="getCustomerInfoDetails" parameterType="String" resultType="kr.co.helf.dto.CustomerDetailDto">
	select 
		u.user_id					as "user.id", 
		u.user_email				as "user.email", 
		u.user_name					as "user.name", 
		u.user_tel					as "user.tel", 
		u.user_gender				as "user.gender", 
		u.user_status				as "user.status", 
		u.user_create_date			as "user.createDate", 
		u.user_point				as "user.point", 
		r.rank_name					as "user.rank.name", 
		rv.recent_visit				as recentVisitDate, 
		ac.accumulated_orders		as accumulatedOrderTotalPrice
	from helf_users u, helf_ranks r, (select max(customer_attendance_Date) recent_visit
									  from helf_customer_attendance
									  where user_id = #{value}) rv,
																		(select sum(orders_total_price) as accumulated_orders
																		from helf_orders
																		where user_id = #{value}) ac
	where u.user_id = #{value}
	and u.rank_no = r.rank_no
	</select>
	
	<select id="getCustomerLessons" parameterType="String" resultType="kr.co.helf.vo.LessonApply">
	select 
			l.lesson_date						as "lesson.date", 
			l.lesson_time						as "lesson.time", 
			l.lesson_name						as "lesson.name", 
			u.user_name							as "lesson.user.name", 
			la.lesson_apply_attendance_status	as attendanceStatus,
			la.lesson_apply_date				as applyDate,
			m.membership_name		as "myMembership.membership.name"
	from helf_lesson_apply la, helf_lesson l, helf_users u, helf_my_membership mm, helf_membership m
	where la.lesson_no = l.lesson_no
	and l.user_id = u.user_id
	and la.my_membership_no = mm.my_membership_no 
	and mm.membership_no = m.membership_no 
	and la.user_id = #{userId}
	</select>

	<select id="getCustomerAttendanceList" parameterType="map" resultType="kr.co.helf.dto.CustomerAttendanceListDto">
	select *
	from (select distinct 
				ca.customer_attendance_no		as "customerAttendance.no", 
				ca.customer_attendance_date		as "customerAttendance.date", 
				mc.category_name				as "customerAttendance.myMembership.membership.category.name", 
				m.membership_name				as "customerAttendance.myMembership.membership.name", 
				l.lesson_name					as "customerAttendance.lessonName",
				row_number() over (order by ca.customer_attendance_date desc) rownumber
		from helf_customer_attendance ca, helf_my_membership mm, helf_membership m, helf_membership_category mc, helf_lesson_apply la, helf_lesson l
		where ca.my_membership_no = mm.my_membership_no 
		and mm.membership_no = m.membership_no
		and m.category_no = mc.category_no 
		and la.my_membership_no(+) = mm.my_membership_no
		and la.lesson_no = l.lesson_no(+)
		and ca.user_id = #{userId}
			<if test="specificDate1 != null and specificDate2 != null">
			and ca.customer_attendance_date between #{specificDate1} and #{specificDate2}
			</if>
	)
	where rownumber between #{begin} and #{end}	
	</select>
	
	<select id="getCustomerAttendance" parameterType="String" resultType="kr.co.helf.vo.CustomerAttendance">
	select distinct 
				ca.customer_attendance_no		as no, 
				ca.customer_attendance_date		as "date", 
				mc.category_name				as "myMembership.membership.category.name", 
				m.membership_name				as "myMembership.membership.name", 
				l.lesson_name					as lessonName,
				row_number() over (order by ca.customer_attendance_date desc) rownumber
		from helf_customer_attendance ca, helf_my_membership mm, helf_membership m, helf_membership_category mc, helf_lesson_apply la, helf_lesson l
		where ca.my_membership_no = mm.my_membership_no 
		and mm.membership_no = m.membership_no
		and m.category_no = mc.category_no 
		and la.my_membership_no(+) = mm.my_membership_no
		and la.lesson_no = l.lesson_no(+)
		and ca.user_id = #{value}
	</select>
	
	<select id="getCustomerAttendanceTotalRowsById" parameterType="map" resultType="int">
	select count(*)
	from helf_customer_attendance
	where user_id = #{userId}
	</select>

	<select id="getAllCustomer" resultType="user">
		select user_id						as id,
			   user_email					as email,
			   user_name					as name,
			   user_tel						as tel,
			   user_encrypted_password		as encryptedPassword,
			   user_gender					as gender,
			   user_status					as status,	
			   user_create_date				as createDate,
			   user_update_date				as updateDate,
			   user_type					as type,
			   rank_no						as "rank.no",
			   user_point					as point,
			   user_mobile_carrier			as mobileCarrier,
			   user_authentication_no		as authenticationNo
		from helf_users
		where user_type = 'ROLE_USER'
	</select>
	
	<select id="getNewRank" resultType="rank" parameterType="string">
		select b.rank_no				as no,
			   b.rank_name				as name,
			   b.rank_min_criteria		as minCriteria,
			   b.rank_max_criteria		as maxCriteria,
			   b.rank_benefit			as benefit,
			   b.rank_point_rate		as pointRate
		from (select user_id, sum(orders_total_price) total
      		  from helf_orders
      		  where ORDERS_PAYMENT_DATE >= TO_DATE(TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM') || '01', 'YYYYMMDD')
      		  <![CDATA[AND ORDERS_PAYMENT_DATE < TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)) + 1)]]>
      		  and orders_payment_state = '결제완료'
      		  group by user_id
      		  HAVING user_id = #{value}) A, helf_ranks B 
      	<![CDATA[where A.total >= B.RANK_Min_CRITERIA and A.total <= B.RANK_MAX_CRITERIA]]>
	</select>
	
	
	<select id="getAllTrainerTotalRows" parameterType="map" resultType="int">
	select count(*)
	from helf_users u, helf_trainers t
	where u.user_id = t.user_id
	and u.user_type='ROLE_TRAINER'
	<if test="opt == 'name'">
				and u.user_name = #{keyword}
				</if>
				<if test="opt == 'tel'">
				and u.user_tel = #{keyword}
				</if>
				<if test="trainerStatus == '재직'">
				and u.user_status = 'Y'
				</if>
				<if test="trainerStatus == '퇴직'">
				and u.user_status = 'N'
				</if>
				<if test="trainerStatus == '승인대기'">
				and u.user_status = 'R'
				</if>
				<if test="trainerTitle == '점장'">
				and t.trainer_title = '점장'
				</if>
				<if test="trainerTitle == '직원'">
				and t.trainer_title = '직원' 
				</if>
	</select>
	
	<select id="getAllTrainers" parameterType="map" resultType="kr.co.helf.vo.Trainer">
	select * 
	from (select u.user_id					as "user.id", 
				   u.user_email					as "user.email", 
				   u.user_name					as "user.name", 
				   u.user_tel					as "user.tel", 
				   u.user_gender				as "user.gender", 
				   u.user_status				as "user.status", 
				   u.user_type					as "user.type", 
		           t.trainer_no					as trainerNo, 
		           t.trainer_file				as trainerFile, 
		           t.trainer_resignation_date	as resignationDate, 
		           t.trainer_title				as title, 
		           t.trainer_hired_date			as hiredDate,
		           ROW_NUMBER() OVER (ORDER BY u.user_name) AS row_number
			from helf_users u, helf_trainers t
			where u.user_id = t.user_id
			and u.user_type='ROLE_TRAINER'
				<if test="opt == 'name'">
				and u.user_name = #{keyword}
				</if>
				<if test="opt == 'tel'">
				and u.user_tel = #{keyword}
				</if>
				<if test="trainerStatus == '재직'">
				and u.user_status = 'Y'
				</if>
				<if test="trainerStatus == '퇴직'">
				and u.user_status = 'N'
				</if>
				<if test="trainerStatus == '승인대기'">
				and u.user_status = 'R'
				</if>
				<if test="trainerTitle == '점장'">
				and t.trainer_title = '점장'
				</if>
				<if test="trainerTitle == '직원'">
				and t.trainer_title = '직원' 
				</if>)
	where row_number BETWEEN #{begin} AND #{end}
	ORDER BY row_number
	</select>
	
	<select id="getTrainerDetailById" parameterType="String" resultType="kr.co.helf.vo.MySalary">
	select u.user_name					as "user.name",
	       u.user_gender				as "user.gender",
	       u.user_tel					as "user.tel",
	       u.user_status				as "user.status",
	       u.user_id					as "user.id",
	       u.user_email					as "user.email",
	       t.trainer_no					as "trainer.trainerNo",
	       t.trainer_title				as "trainer.title",
	       t.trainer_hired_date			as "trainer.hiredDate",
	       t.trainer_resignation_date	as "trainer.resignationDate",
	       m.annual_salary				as "annualSalary"
	from helf_users u, helf_trainers t, helf_my_salary m
	where u.user_id = t.user_id 
	and m.trainer_no(+) = t.trainer_no
	and u.user_id = #{value}
	</select>

	<!-- 총 회원,강사 수 조회하는 쿼리 (예광)-->
	<select id="getUserAndTrainerCount" resultType="User">
		SELECT
			COUNT(*) AS totalUsers,
			SUM(CASE WHEN user_type = 'ROLE_TRAINER' THEN 1 ELSE 0 END) AS totalTrainers
		FROM helf_users
	</select>
	
	<!-- 특정 트레이너의 개인수업 수 조회(유리)-->
	<select id="getPersonalLesson" resultType="int" parameterType="string">
		select
			count(*) 
		from 
			helf_personal_lesson
		where
		 	user_id = #{value}
	</select>
	
	<!-- 특정 트레이너의 그룹수업 수 조회(유리)-->
	<select id="getGroupLesson" resultType="int" parameterType="string">
		select
			count(*) 
		from
			 helf_lesson
		where
			 user_id = #{value}
	</select>
	
	<!-- 특정 트레이너의 경력 조회(유리) -->
	<select id="getTrainerCareerByNo" parameterType="int" resultType="TrainerCareer">
		select
			career_no,
			career_name,
			career_start_date,
			career_end_date,
			trainer_no
		from 
			helf_trainer_career
		where
			trainer_no = #{value}
	</select>
  
	<!-- 트레이너 번호로 유저 조회 -->
	<select id="getTrainerByNo" parameterType="int" resultType="Trainer">
		select trainer_no					as trainerNo,
				trainer_file				as trainerFile,
				trainer_resignation_date	as resignationDate,
				trainer_title				as title,
				user_id						as "user.id",
				trainer_hired_date			as hiredDate
		from helf_trainers
		where trainer_no = #{value}
	</select>

		<!-- 트레이너 경력정보 수정(트레이너 경력객체에 등록) -->
	<update id="updateTrainerCareer" parameterType="TrainerCareer">
	    UPDATE helf_trainer_career
	    SET 
	        career_name = #{name},
	        career_start_date = #{startDate},
	        career_end_date = #{endDate}
	    WHERE
	        trainer_no = #{trainer.trainerNo}
	        AND career_no = #{no} 
	</update>

	<!-- 경력삭제 ajax  -->
	<delete id="deleteCareer" parameterType="int">
	    DELETE FROM HELF_TRAINER_CAREER
	    WHERE CAREER_NO = #{value}
	</delete>
	
	<select id="getTrainerUserById" parameterType="string" resultType="User">
		select
			user_id						as id,
			user_email					as email,
			user_name					as name,
			user_tel					as tel,
			user_encrypted_password 	as encryptedPassword,
			user_gender					as gender,
			user_status					as status,
			user_mobile_carrier			as mobileCarrier,
			user_create_date			as createDate, 
			user_update_date			as updateDate,
			user_point					as point,
			rank_no						as "rank.no",
			user_type					as type,
			user_authentication_no		as authenticationNo,
			user_social					as social
		from
			helf_users 
		where 
			user_id = #{value}
	</select>

	<select id="getAllLessonById" parameterType="string" resultType="Lesson">
		select lesson_no				as no,
				lesson_name				as name,
				lesson_time				as time,
				lesson_description		as description,
				lesson_disabled			as disabled,
				lesson_req_cnt			as reqCnt,
				lesson_quota			as quota,
				lesson_reservation		as reservation,
				lesson_type				as type,
				lesson_date				as "date",
				user_id					as "user.id",
				membership_no			as "membership.no"
		from helf_lesson
		where user_id = #{value}
	</select>
	
	<select id="getAllPersonalLessonByNo" parameterType="int" resultType="PersonalLesson">
		select personal_lesson_no				as no,
				personal_lesson_name			as name,
				personal_lesson_date			as "date",
				personal_lesson_time			as time,
				personal_lesson_content			as content,
				personal_lesson_status			as status,
				my_membership_no				as "myMembership.no",
				trainer_no						as "trainer.no",
				user_id							as "user.id",
				personal_lesson_create_date		as createDate
		from helf_personal_lesson
		where trainer_no = #{value}
	</select>

</mapper>